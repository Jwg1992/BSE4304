if (!require("pacman")) install.packages("pacman")
pacman::p_load(httr,EcoHydRology,curl,data.table,multisensi)
# KEEP OPEN AS YOU WILL BE WALKING THROUGH IT FOR LAB    
vignette("multisensi-vignette")
#
# Let’s get started as normal. 
setwd("~")
objects()
rm(list=objects())
#
dir.create("~/Week11")
setwd("~/Week11/")
list.files(all.files = T)
objects()   # Should be empty.
# Run through Vignette Example like class
# Read the man page and look at the example for the Solar() function
# and become familiar with the variables and parameters passed in.
?EcoHydRology::Solar

verhulst <- function(K, Y0, a, t) {
  output <- K/(1 + (K/Y0 - 1) * exp(-a * t))
  return(output)
}
Solar(lat, Jday, Tx, Tn, albedo=0.2, forest=0, slope=0, aspect = 0,
      units="kJm2d", latUnits = "unknown", printWarn=TRUE)

T <- seq(from = 5, to = 365, by = 5)
Solar2 <- function(X, t = T) {
  out <- matrix(nrow = nrow(X), ncol = length(t), NA)
  for (i in 1:nrow(X)) {
    out[i, ] <- Solar(lat=X$lat[i], 
                      Tx=X$Tx[i], 
                      Tn=(X$Tx[i]-X$Trange[i]), 
                      albedo=X$albedo[i],
                      slope=X$slope[i],
                      aspect=X$aspect[i],
                      Jday=t,
                      units="Wm2")
  }
  out <- as.data.frame(out)
  names(out) <- paste("t", t, sep = "")
  return(out)
}
n <- 10
set.seed(1234)
X <- data.frame(lat = runif(n, min = 0, max = pi/3), 
                Tx = runif(n, min = 1, max = 40),
                Trange = runif(n, min = 1, max = 10),
                albedo = runif(n, min = 0, max = 1),
                slope = runif(n, min = 0, max = 0.2),
                aspect = runif(n, min = 0, max = pi*2))
Y <- Solar2(X)
par(cex.axis = 0.7, cex.lab = 0.8)
plot(T, Y[1, ], type = "l", xlab = "Time", ylab = "Population size",
     ylim = c(0, max(Y)))
for (i in 2:n) {
  lines(T, Y[i, ], type = "l", col = i)
}

X <- expand.grid(lat = c(0.1,0.77,1.1), 
                 Tx = c(5,15,25),
                 Trange = c(2,9,16),
                 albedo = c(0.1,0.77,1.1),
                 slope = c(0.1,0.2,0.3),
                 aspect = c(0.1,0.5,1.0))

Y <- Solar2(X) ## this part can be performed outside R if necessary
Solar.seq <- multisensi(design=X, model=Y, reduction=NULL, center=FALSE)

plot(Solar.seq, normalized = TRUE, color = terrain.colors, gsi.plot = FALSE)
title(xlab = "Time in half-decades.")
plot(Solar.seq, normalized = FALSE, color = terrain.colors, gsi.plot = FALSE)
title(xlab = "Time in half-decades.")

Solar.pca <- multisensi(design=X, model=Y, reduction=basis.ACP, scale=FALSE)
plot(Solar.pca, graph = 1)
plot(Solar.pca, graph = 2)
plot(Solar.pca, graph = 3)

library(sensitivity)
m <- 10000
Xb <- data.frame(lat = runif(m, min = 0, max = pi/4), 
                 Tx = runif(m, min = 1, max = 40),
                 Trange = runif(m, min = 1, max = 10),
                 albedo = runif(m, min = 0, max = 1),
                 slope = runif(m, min = 0, max = 0.2),
                 aspect = runif(m, min = 0, max = pi*2))

Solar.seq.sobol <- multisensi(design = sobol2007, model = Solar2,
                                 reduction = NULL, analysis = analysis.sensitivity, center = TRUE,
                                 design.args = list(X1 = Xb[1:(m/2), ], 
                                                    X2 = Xb[(1 + m/2):m, ], 
                                                    nboot = 100),
                                 analysis.args = list(keep.outputs = FALSE))

plot(Solar.seq.sobol, normalized = TRUE, color = terrain.colors, gsi.plot = FALSE)
title(xlab = "Time in half-decades")

Solar.seq.fast <- multisensi(design = fast99, model = Solar2,
                                center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                                design.args=list( factors=c("K","Y0","a"), n=1000, q = "qunif",
                                                  q.arg = list(list(min=100, max=1000), list(min=1, max=40),
                                                               list(min = 0.05, max = 0.2))),
                                analysis.args=list(keep.outputs=FALSE))
plot(Solar.seq.fast, normalized = TRUE, color = terrain.colors, gsi.plot = FALSE)
title(xlab = "Time in half-decades")
#
# We start by defining your objective function, same as the “Use Case” on 
# page 2 of the vignette. Your function is defined, though you need to extend
# it for Julian days, and of course, Tmin cannot be greater than Tmax, so you 
# will have a Tmin and dT (with Tmax=Tmin+dT)
#
J <- seq(from = 1, to = 365, by = 5)
# Solar(lat, Jday, Tx, Tn, albedo=0.2, forest=0, slope=0, aspect = 0,
#      units="kJm2d")
# Note that the EcoHydRology::Solar() function is for specific days, 
# as such, we will want to create a function to loop through our period
# of interest:
Solar_Looped <- function(X, Jday = J) {
  out <- matrix(nrow = nrow(X), ncol = length(Jday), NA)
  for (i in 1:nrow(X)) {
    out[i, ] <- Solar(lat=X$lat[i],
                      Jday=Jday, Tx=X$Tx[i], 
                      Tn=(X$Tx[i]-X$Trange[i]), 
                      X$slope[i],X$aspect[i],units="Wm2")
  }
  out <- as.data.frame(out)
  names(out) <- paste("Jday", Jday, sep = "")
  return(out)
}
# A sample of with graph, from the vignette, we continue to build a 
# dataframe for our specific case with random uniform numbers for the 
# Tx, Tn (Tx - Trange), slope, and aspect.
# 
n <- 10
set.seed(1234)
X <- data.frame(Tx = runif(n, min = 5, max = 30), Trange = runif(n, min = 2,
                                                                   max = 16), slope = runif(n, min = 0.0, max = 0.2),
                  aspect = runif(n, min = 0.0, max = 0.2),
                  lat=runif(n, min = 0.0, max = 1.1))  # 1.1 radians lat is where?
# 
# Look at what you are passing into your new Solar_Looped() function
View(X)
#
Y <- Solar_Looped(X,Jday = J)
#
# You can ignore all the warnings, remember Errors=bad, warnings=not so much 
# So lets move on and build our summary graph
par(cex.axis = 0.7, cex.lab = 0.8)
plot(J, Y[1, ], type = "l", xlab = "Day of Year", 
       ylab = "Surface Short Wave Rad(W/m^2)")
for (i in 2:n) {
  lines(J, Y[i, ], type = "l", col = i)
}
# 
# Well, that is kewl, yet expected
#
# Multisensitivities
# 3 Sequential univariate sensitivity analyses
# 3.1 Calculation of sensitivity indices
Solar_Looped.seq <- multisensi(model=Solar_Looped, reduction=NULL, center=FALSE,
                                 design.args = list( Tx = c(5,15,25), 
                                                     Trange = c(2,9,16), 
                                                     slope = c(0.1,0.2,0.3),
                                                     aspect = c(0.1,.5,1.0),
                                                     lat=c(0.1,.77,1.1)))

print(Solar_Looped.seq, digits = 2)
#
# 3.2 Graphical representation of sensitivity indices
#
dev.off() # Clean up previous par()
plot(Solar_Looped.seq, normalized = TRUE, color = terrain.colors, gsi.plot = FALSE)#normalized the upper subplot shows the extreme (tirets), #inter-quartile (grey) and median (bold line) output values
title(xlab = "Days of the Year.")
plot(Solar_Looped.seq, normalized = FALSE, color = terrain.colors, gsi.plot = FALSE)
title(xlab = "Days of the Year.")


#
# Take note of section 3.3 Calculating simulations apart, as there are 
# several ways to invoke the multisensi() function.
# First by building our X (design input) and Y (model run on X). Here 
# here is us doing the same sensitivities by passing previously run 
# models (Y)
X <- expand.grid(Tx = c(5,15,25), 
                   Trange = c(2,9,16), 
                   slope = c(0.1,0.2,0.3),
                   aspect = c(0.1,.5,1.0),
                   lat=c(0.1,.77,1.1))
# Look at our input
head(X,10)
Y <- Solar_Looped(X,Jday=J) # can be performed outside R if necessary
# Look at our model output
head(Y,10)
# Notice on the next line that “model=Solar_Looped” is replaced with our 
# model output “Y” and we add in the input into “design=X”. This 
# is exactly the same as above, though with the model run 
# external to the multisensi() function:
Solar_Looped.seq <- multisensi(design=X, model=Y, reduction=NULL, center=FALSE) 



# 4 Multivariate sensitivity analysis based on PCA
# read the vignette, though note we are using the multisensi() function
# to run our model (i.e. no “design” variable, and model=Solar_Looped)
Solar_Looped.pca <- multisensi(model=Solar_Looped, reduction=basis.ACP, scale=FALSE,
                                 design.args = list( Tx = c(5,15,25), 
                                                     Trange = c(2,9,16), 
                                                     slope = c(0.1,0.2,0.3),
                                                     aspect = c(0.1,.5,1.0),
                                                     lat=c(0.1,.77,1.1)))

summary(Solar_Looped.pca, digits = 2)
# 4.2 Graphical representation for PCA based analysis with 
# explanation in vignette. These graphs require the plot window to be larger
# and might give "Error in plot.new() : figure margins too large". 
# If so expand the plot window.
dev.off()
plot(Solar_Looped.pca, graph = 1)
plot(Solar_Looped.pca, graph = 2)
plot(Solar_Looped.pca, graph = 3)
#
# 5.1 Polynomial reduction of the multivariate output
# Skip 5.1 Polynomial reduction for now and move on to
# 6 Alternative methods of sensitivity analysis
# 6.1 With Sobol2007 implemented in the package sensitivity
# 
library(sensitivity)
m <- 10000
Xb <- data.frame(Tx = runif(m, min = 5, max = 30), 
                   Trange = runif(m, min = 2,max = 16), 
                   slope = runif(m, min = 0.0, max = 0.2),
                   aspect = runif(m, min = 0.0, max = 0.2),
                   lat=runif(m, min = 0.0, max = 1.1))

Solar_Looped.seq.sobol <- multisensi(design = sobol2007, model = Solar_Looped,
                                       reduction = NULL, analysis = analysis.sensitivity, center = TRUE,
                                       design.args = list(X1 = Xb[1:(m/2), ], X2 = Xb[(1 + m/2):m, ], nboot = 100),
                                       analysis.args = list(keep.outputs = FALSE))
#
# Note, this is a good time time get a drink of water and/or pee as 
# it is running the function m=10,000 times (a few minutes).
#
print(Solar_Looped.seq.sobol, digits = 2)
dev.off()
plot(Solar_Looped.seq.sobol, normalized = TRUE, color = terrain.colors)
dev.off()  # this also cleans the graphics device. 
#
# 6.2 With fast99 implemented in the package sensitivity
#
Solar_Looped.seq.fast <- multisensi(design = fast99, model = Solar_Looped,
                                      center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                                      design.args=list( factors=c("Tx","Trange","slope","aspect","lat"), 
                                                        n=1000, q = "qunif",
                                                        q.arg = list(list(min=5, max=30), 
                                                                     list(min=2, max=16),
                                                                     list(min=0, max=.2),
                                                                     list(min=0, max=.2),
                                                                     list(min = 0.0, max = 1.1))),
                                      analysis.args=list(keep.outputs=FALSE))

print(Solar_Looped.seq.fast,digits=2)
plot(Solar_Looped.seq.fast, normalized = TRUE, color = terrain.colors)

S_avg=15; porosity=.75; log(1 - (porosity/(1 - 2.54/(2.381 * S_avg))) - porosity)
[1] NaN
Warning message:
In log(1 - (porosity/(1 - 2.54/(2.381 * S_avg))) - porosity) :
NaNs produced
If this happens, you will likely see the error:
There were n warnings (use warnings() to see them)
And if this happens, you can get a clue as to which variable you have allowed outside of the natural range by showing the warnings:
warnings()
Warning messages:
1: In log(1 - (porosity/(1 - 2.54/(2.381 * S_avg))) - porosity) : NaNs produced
Note that these are different warnings than you experienced above which were just informational within the function:
There were 50 or more warnings (use warnings() to see the first 50)
warnings()
Warning messages:
1: In Solar(lat = X$lat[i], Jday = Jday, Tx = X$Tx[i], Tn = (X$Tx[i] -  ... :
In Solar(): Input latitude units are not specified and assumed to be radians
                                                               
# Solution for PET_fromTemp
# Trick is you have to notice that "lat_radians" has replaced "lat" and
# there is no "units" variable... and... notice that the function has to
# be fixed to allow Jday to be a vector of different size than Tmax and Tmin
# Solution for PET_fromTemp
# Trick is you have to notice that "lat_radians" has replaced "lat" and
# there is no "units" variable... and... notice that the function has to
# be fixed to allow Jday to be a vector of different size than Tmax and Tmin

#Homework Start
PET_fromTemp <- function (Jday, Tmax_C, Tmin_C, lat_radians, AvgT = (Tmax_C + Tmin_C)/2, albedo = 0.18, TerrestEmiss = 0.97, aspect = 0, slope = 0, forest = 0, PTconstant=1.26, AEparams=list(vp=NULL, opt="linear"))
{
  cloudiness <- EstCloudiness(Tmax_C, Tmin_C)
  DailyRad <- NetRad(lat_radians, Jday, Tmax_C, Tmin_C, albedo, forest, slope, aspect, AvgT, cloudiness, TerrestEmiss, AvgT, AEparams=AEparams)
  potentialET <- PTpet(DailyRad, AvgT, PTconstant)
  potentialET[which(potentialET < 0)] <- 0
  potentialET[which(Tmax_C == -999 | Tmin_C == -999)] <- (-999)
  return(potentialET)
}

PET2 <- function(X, t = T) {
  out <- matrix(nrow = nrow(X), ncol = length(t), NA)
  for (i in 1:nrow(X)) {
    out[i, ] <- PET_fromTemp(Jday=t, 
                              Tmax_C=X$Tmax_C[i],
                              Tmin_C=(X$Tmax_C[i]-X$Trange[i]),
                              lat_radians=X$lat_radians[i],
                              AvgT = (X$Tmax_C[i] + (X$Tmax_C[i]-X$Trange[i]))/2, 
                              aspect=X$aspect[i],
                              slope=X$slope[i])
  }
  out <- as.data.frame(out)
  names(out) <- paste("t", t, sep = "")
  return(out)
}

n <- 10
set.seed(1234)
X <- data.frame(Tmax_C = runif(n, min = 1, max = 50), 
                Trange = runif(n, min = 1, max = 10),
                lat_radians = runif(n,min=0,max=pi/3),
                slope=runif(n, min=0, max=0.2),
                aspect=runif(n, min=0, max=pi*2))
Y <- PET2(X)
#par(cex.axis = 0.7, cex.lab = 0.8)
#plot(T, Y[1, ], type = "l", xlab = "Time", ylab = "Population size",
#     ylim = c(0, max(Y)))
#for (i in 2:n) {
#  lines(T, Y[i, ], type = "l", col = i)
#}

X <- expand.grid(Tmax_C = c(1,30,50), 
                 Trange = c(1,5,10), 
                 lat_radians = c(0, pi/4, pi/3),
                 slope = c(0.1,0.2,0.3),
                 aspect = c(0.1,.5,1.0)) 
Y <- PET2(X) 
PET.seq <- multisensi(design=X, model=Y, reduction=NULL, center=FALSE)
## [*] Analysis + Sensitivity Indices

library(multisensi)
library(sensitivity)
PET.seq.fast <- multisensi(design = fast99, model = PET2,
                           center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                           design.args=list( factors=c("Tmax_C","Trange","lat_radians", "slope","aspect"), n=1000, q = "qunif",
                                             q.arg = list(list(min=1, max=50), list(min=1, max=10),
                                                          list(min = 0, max = pi/3), list(min=0,max=0.2), list(min=0,max=pi*2))),
                           analysis.args=list(keep.outputs=FALSE))


PET.pca <- multisensi(design=X, model=Y, reduction=basis.ACP, scale=FALSE)
summary(PET.pca, digits = 2)

plot(PET.pca, graph = 1)
title("PET Graph 1")
plot(PET.pca, graph = 2)
title("PET Graph 2")
plot(PET.pca, graph = 3)
title("PET Graph 3")

#NetRad

#NetRad(lat, Jday, Tx, Tn, albedo = 0.18, forest = 0, slope = 0, 
#       aspect = 0, airtemp = (Tn+Tx)/2, cloudiness = "Estimate", 
#       surfemissivity = 0.97, surftemp = (Tn+Tx)/2, units = "kJm2d", 
#       AEparams=list(vp=NULL, opt="linear"))

NetRad <- function(X, t = T) {
  out <- matrix(nrow = nrow(X), ncol = length(t), NA)
  for (i in 1:nrow(X)) {
    out[i, ] <- EcoHydRology::NetRad(lat=X$lat[i], 
                                     Tx=X$Tx[i], 
                                     Tn=(X$Tx[i]-X$Trange[i]), 
                                     albedo=X$albedo[i],
                                     slope=X$slope[i],
                                     aspect=X$aspect[i],
                                     Jday=t,  
                                     units="kJm2d")
  }
  out <- as.data.frame(out)
  names(out) <- paste("t", t, sep = "")
  return(out)
}

n <- 10
set.seed(1234)
X <- data.frame(lat = runif(n, min = 0, max = pi/3), 
                Tx = runif(n, min = 1, max = 40), 
                Trange = runif(n, min = 1, max = 10),
                albedo=runif(n, min=0, max=1),
                slope=runif(n, min=0, max=0.2),
                aspect=runif(n, min=0, max=pi*2))
Y <- NetRad(X)
#par(cex.axis = 0.7, cex.lab = 0.8)
#plot(T, Y[1, ], type = "l", xlab = "Time (days)", ylab = "Daily Net Radiation (kJ/m2d)",
#     ylim = c(0, max(Y)))
#for (i in 2:n) {
#  lines(T, Y[i, ], type = "l", col = i)
#}

library(multisensi)
X <- expand.grid(Tx = c(1,30,50), 
                 Trange = c(1,5,10), 
                 lat = c(0, pi/4, pi/3),
                 slope = c(0.1,0.2,0.3),
                 aspect = c(0.1,.5,1.0),
                 albedo = c(0.1, 0.3, 0.8)) 
Y <- NetRad(X)
NetRad.seq <- multisensi(design=X, model=Y, reduction=NULL, center=FALSE)

NetRad.seq.fast <- multisensi(design = fast99, model = NetRad,
                              center = FALSE, reduction = NULL, analysis = analysis.sensitivity,
                              design.args=list( factors=c("lat", "Tx","Trange","albedo", "slope", "aspect"), n=1000, q = "qunif",
                                                q.arg = list(list(min=0, max=pi/3), list(min=1, max=40),
                                                             list(min = 1, max = 10), list(min=0, max=1), list(min=0, max=0.2),
                                                             list(min=0, max=pi*2))),
                              analysis.args=list(keep.outputs=FALSE))

NetRad.pca <- multisensi(design=X, model=Y, reduction=basis.ACP, scale=FALSE)
summary(NetRad.pca, digits = 2)

plot(NetRad.pca, graph = 1)
title("NetRad Graph 1")
plot(NetRad.pca, graph = 2)
title("NetRad Graph 2")
plot(NetRad.pca, graph = 3)
title("NetRad Graph 3")
